<?php

/**
 * CODNITIVE
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE_EULA.html.
 * It is also available through the world-wide-web at this URL:
 * http://www.codnitive.com/en/terms-of-service-softwares/
 * http://www.codnitive.com/fa/terms-of-service-softwares/
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade to newer
 * versions in the future.
 *
 * @category   Codnitive
 * @package    Codnitive_PostEms
 * @author     Hassan Barza <support@codnitive.com>
 * @copyright  Copyright (c) 2012 CODNITIVE Co. (http://www.codnitive.com)
 * @license    http://www.codnitive.com/en/terms-of-service-softwares/ End User License Agreement (EULA 1.0)
 */
class Codnitive_Frotel_Model_Carrier_Post
	extends Mage_Shipping_Model_Carrier_Tablerate
{

	protected $_code = 'frotel';
	protected $_method = 'post';
	protected $_isFixed = true;
//	protected $_default_condition_name = 'package_weight';

	public function __construct()
	{
		parent::__construct();
	}

	public function collectRates(Mage_Shipping_Model_Rate_Request $request)
	{
		if (!$this->getConfigFlag('active')) {
			return false;
		}

//		if ( !$this->getConfigFlag('include_virtual_price') && $request->getAllItems()) {
//			foreach ($request->getAllItems() as $item) {
//				if ($item->getParentItem()) {
//					continue;
//				}
//				if ($item->getHasChildren() && $item->isShipSeparately()) {
//					foreach ($item->getChildren() as $child) {
//						if ($child->getProduct()->isVirtual()) {
//							$request->setPackageValue($request->getPackageValue() - $child->getBaseRowTotal());
//						}
//					}
//				}
//				elseif ($item->getProduct()->isVirtual()) {
//					$request->setPackageValue($request->getPackageValue() - $item->getBaseRowTotal());
//				}
//			}
//		}

		/*$freeQty = 0;
		if ($request->getAllItems()) {
			foreach ($request->getAllItems() as $item) {
				if ($item->getProduct()->isVirtual() || $item->getParentItem()) {
					continue;
				}

				if ($item->getHasChildren() && $item->isShipSeparately()) {
					foreach ($item->getChildren() as $child) {
						if ($child->getFreeShipping() && !$child->getProduct()->isVirtual()) {
							$freeQty += $item->getQty() * ($child->getQty() - (is_numeric($child->getFreeShipping()) ? $child->getFreeShipping() : 0));
						}
					}
				}
				elseif ($item->getFreeShipping()) {
					$freeQty += ($item->getQty() - (is_numeric($item->getFreeShipping()) ? $item->getFreeShipping() : 0));
				}
			}
		}*/

		if (!$request->getConditionName()) {
			$request->setConditionName($this->getConfigData('condition_name') ? $this->getConfigData('condition_name') : $this->_default_condition_name);
		}

		$oldWeight = $request->getPackageWeight();
		$oldQty = $request->getPackageQty();

		$request->setPackageWeight($request->getFreeMethodWeight());
//		$request->setPackageQty($oldQty - $freeQty);

		$result = Mage::getModel('shipping/rate_result');
//		$rate = $this->getRate($request);

		$request->setPackageWeight($oldWeight);
		$request->setPackageQty($oldQty);

		if (!empty($rate) && $rate['price'] >= 0) {
			$method = Mage::getModel('shipping/rate_result_method');

			$method->setCarrier($this->_code);
			$method->setCarrierTitle($this->getConfigData('title'));

			$method->setMethod($this->_method);
			$method->setMethodTitle('Post');

			if ($request->getFreeShipping() === true || ($request->getPackageQty() == $freeQty)) {
				$shippingPrice = 0;
			}
			else {
				$shippingPrice = $this->getFinalPriceWithHandlingFee($rate['price']);
			}

			$method->setPrice(5300);
			$method->setCost(1000);

			$result->append($method);
		}

		return $result;
	}

//	public function getRate(Mage_Shipping_Model_Rate_Request $request)
//	{
//		return Mage::getResourceModel('postems/ems')->getRate($request);
//	}

	public function getAllowedMethods()
	{
		return array($this->_method => $this->getConfigData('name'));
	}

}
